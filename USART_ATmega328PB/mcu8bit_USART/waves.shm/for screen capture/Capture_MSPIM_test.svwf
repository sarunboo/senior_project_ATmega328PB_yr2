
#
# Mnemonic Maps
#
mmap new  -reuse -name {Boolean as Logic} -radix %b -contents {{%c=FALSE -edgepriority 1 -shape low}
{%c=TRUE -edgepriority 1 -shape high}}
mmap new  -reuse -name {Example Map} -radix %x -contents {{%b=11???? -bgcolor orange -label REG:%x -linecolor yellow -shape bus}
{%x=1F -bgcolor red -label ERROR -linecolor white -shape EVENT}
{%x=2C -bgcolor red -label ERROR -linecolor white -shape EVENT}
{%x=* -label %x -linecolor gray -shape bus}}

array unset createdGroup
array set createdGroup {}
#
# Groups
#
if {[catch {group get -using [list {Outputs}]}]} {
set createdGroup([list {Outputs}]) 1
catch {group new -name Outputs -overlay 0}
}
if {[catch {group get -using [list {Inputs}]}]} {
set createdGroup([list {Inputs}]) 1
catch {group new -name Inputs -overlay 0}
}
if {[catch {group get -using [list {Internals}]}]} {
set createdGroup([list {Internals}]) 1
catch {group new -name Internals -overlay 0}
}
if {[catch {group get -using [list {IRQ_out}]}]} {
set createdGroup([list {IRQ_out}]) 1
catch {group new -name IRQ_out -overlay 0}
}
if {[catch {group get -using [list {IRQ_in}]}]} {
set createdGroup([list {IRQ_in}]) 1
catch {group new -name IRQ_in -overlay 0}
}
if {[catch {group get -using [list {Control_Reg}]}]} {
set createdGroup([list {Control_Reg}]) 1
catch {group new -name Control_Reg -overlay 0}
}
if {[catch {group get -using [list {TX_internals}]}]} {
set createdGroup([list {TX_internals}]) 1
catch {group new -name TX_internals -overlay 0}
}
if {[catch {group get -using [list {RX_internals}]}]} {
set createdGroup([list {RX_internals}]) 1
catch {group new -name RX_internals -overlay 0}
}
if {[catch {group get -using [list {Core Signals}]}]} {
set createdGroup([list {Core Signals}]) 1
catch {group new -name {Core Signals} -overlay 0}
}
if {[catch {group get -using [list {USART_0 Signals}]}]} {
set createdGroup([list {USART_0 Signals}]) 1
catch {group new -name {USART_0 Signals} -overlay 0}
}
if {[catch {group get -using [list {USART_1 Signals}]}]} {
set createdGroup([list {USART_1 Signals}]) 1
catch {group new -name {USART_1 Signals} -overlay 0}
}
if {[catch {group get -using [list {Control Reg 0}]}]} {
set createdGroup([list {Control Reg 0}]) 1
catch {group new -name {Control Reg 0} -overlay 0}
}
if {[catch {group get -using [list {Control Reg 1}]}]} {
set createdGroup([list {Control Reg 1}]) 1
catch {group new -name {Control Reg 1} -overlay 0}
}
if {[info exists createdGroup([list {Outputs}])]} {
group using Outputs
group set -overlay 0
group set -comment {}
group clear 0 end
group insert \
    IRQ_out
}

if {[info exists createdGroup([list {Inputs}])]} {
group using Inputs
group set -overlay 0
group set -comment {}
group clear 0 end
group insert \
    IRQ_in
}

if {[info exists createdGroup([list {Internals}])]} {
group using Internals
group set -overlay 0
group set -comment {}
group clear 0 end
group insert \
    Control_Reg \
    TX_internals \
    RX_internals
}

if {[info exists createdGroup([list {IRQ_out}])]} {
group using IRQ_out
group set -overlay 0
group set -comment {}
group clear 0 end

}

if {[info exists createdGroup([list {IRQ_in}])]} {
group using IRQ_in
group set -overlay 0
group set -comment {}
group clear 0 end

}

if {[info exists createdGroup([list {Control_Reg}])]} {
group using Control_Reg
group set -overlay 0
group set -comment {}
group clear 0 end

}

if {[info exists createdGroup([list {TX_internals}])]} {
group using TX_internals
group set -overlay 0
group set -comment {}
group clear 0 end

}

if {[info exists createdGroup([list {RX_internals}])]} {
group using RX_internals
group set -overlay 0
group set -comment {}
group clear 0 end

}

if {[info exists createdGroup([list {Core Signals}])]} {
group using {Core Signals}
group set -overlay 0
group set -comment {}
group clear 0 end
group insert \
    [subst  {[format {usart_test_tb3.core_ireset}]} ] \
    [subst  {[format {usart_test_tb3.cp2}]} ] \
    [subst  {[format {usart_test_tb3.core_dbusout[7:0]}]} ] \
    [subst  {[format {usart_test_tb3.core_ramwe}]} ] \
    [subst  {[format {usart_test_tb3.core_ramre}]} ] \
    [subst  {[format {usart_test_tb3.core_ramadr[11:0]}]} ] \
    [subst  {[format {usart_test_tb3.core_irqackad[5:0]}]} ] \
    [subst  {[format {usart_test_tb3.core_irqack}]} ]
}

if {[info exists createdGroup([list {USART_0 Signals}])]} {
group using {USART_0 Signals}
group set -overlay 0
group set -comment {}
group clear 0 end
group insert \
    [subst  {[format {usart_test_tb3.data_bus[0]}]} ] \
    [subst  {[format {usart_test_tb3.d_en_bus[0]}]} ] \
    {Control Reg 0} \
    [subst  {[format {usart_test_tb3.UMSEL0}]} ] \
    [subst  {[format {usart_test_tb3.USARTn_0_inst.XCKn_i}]} ] \
    [subst  {[format {usart_test_tb3.DDR_XCK0}]} ] \
    [subst  {[format {usart_test_tb3.USARTn_0_inst.XCKn_o}]} ] \
    [subst  {[format {usart_test_tb3.USARTn_0_inst.TxDn_o}]} ] \
    [subst  {[format {usart_test_tb3.TXEN0}]} ] \
    [subst  {[format {usart_test_tb3.USARTn_0_inst.RxDn_i}]} ] \
    [subst  {[format {usart_test_tb3.RXEN0}]} ] \
    [subst  {[format {usart_test_tb3.USARTn_0_inst.rc_state[1:0]}]} ] \
    [subst  {[format {usart_test_tb3.USARTn_0_inst.rx_filt}]} ] \
    [subst  {[format {usart_test_tb3.USARTn_0_inst.rx_sync[2:0]}]} ] \
    [subst  {[format {usart_test_tb3.USARTn_0_inst.rx_bitcnt[3:0]}]} ] \
    [subst  {[format {usart_test_tb3.USARTn_0_inst.rx_samp}]} ] \
    [subst  {[format {usart_test_tb3.USARTn_0_inst.rx_sh_reg[10:0]}]} ] \
    [subst  {[format {usart_test_tb3.USARTn_0_inst.tx_samp}]} ] \
    [subst  {[format {usart_test_tb3.USARTn_0_inst.tx_ris_e}]} ] \
    [subst  {[format {usart_test_tb3.USARTn_0_inst.tx_fal_e}]} ]
}

if {[info exists createdGroup([list {USART_1 Signals}])]} {
group using {USART_1 Signals}
group set -overlay 0
group set -comment {}
group clear 0 end
group insert \
    [subst  {[format {usart_test_tb3.data_bus[1]}]} ] \
    [subst  {[format {usart_test_tb3.d_en_bus[1]}]} ] \
    {Control Reg 1} \
    [subst  {[format {usart_test_tb3.UMSEL1}]} ] \
    [subst  {[format {usart_test_tb3.USARTn_1_inst.XCKn_i}]} ] \
    [subst  {[format {usart_test_tb3.DDR_XCK1}]} ] \
    [subst  {[format {usart_test_tb3.USARTn_1_inst.XCKn_o}]} ] \
    [subst  {[format {usart_test_tb3.USARTn_1_inst.tx_ris_e}]} ] \
    [subst  {[format {usart_test_tb3.USARTn_1_inst.TxDn_o}]} ] \
    [subst  {[format {usart_test_tb3.TXEN1}]} ] \
    [subst  {[format {usart_test_tb3.USARTn_1_inst.RxDn_i}]} ] \
    [subst  {[format {usart_test_tb3.USARTn_1_inst.tx_fal_e}]} ] \
    [subst  {[format {usart_test_tb3.USARTn_1_inst.rx_sh_reg[10:0]}]} ] \
    [subst  {[format {usart_test_tb3.RXEN1}]} ] \
    [subst  {[format {usart_test_tb3.USARTn_1_inst.rc_state[1:0]}]} ] \
    [subst  {[format {usart_test_tb3.USARTn_1_inst.rx_filt}]} ] \
    [subst  {[format {usart_test_tb3.USARTn_1_inst.rx_sync[2:0]}]} ] \
    [subst  {[format {usart_test_tb3.USARTn_1_inst.rx_bitcnt[3:0]}]} ] \
    [subst  {[format {usart_test_tb3.USARTn_1_inst.rx_baud_cnt[3:0]}]} ] \
    [subst  {[format {usart_test_tb3.USARTn_1_inst.tx_samp}]} ] \
    [subst  {[format {usart_test_tb3.USARTn_1_inst.rx_samp}]} ]
}

if {[info exists createdGroup([list {Control Reg 0}])]} {
group using {Control Reg 0}
group set -overlay 0
group set -comment {}
group clear 0 end
group insert \
    [subst  {[format {usart_test_tb3.USARTn_0_inst.UBRRn[11:0]}]} ] \
    [subst  {[format {usart_test_tb3.USARTn_0_inst.UCSRnA[7:0]}]} ] \
    [subst  {[format {usart_test_tb3.USARTn_0_inst.UCSRnB[7:0]}]} ] \
    [subst  {[format {usart_test_tb3.USARTn_0_inst.UCSRnC[7:0]}]} ]
}

if {[info exists createdGroup([list {Control Reg 1}])]} {
group using {Control Reg 1}
group set -overlay 0
group set -comment {}
group clear 0 end
group insert \
    [subst  {[format {usart_test_tb3.USARTn_1_inst.UBRRn[11:0]}]} ] \
    [subst  {[format {usart_test_tb3.USARTn_1_inst.UCSRnA[7:0]}]} ] \
    [subst  {[format {usart_test_tb3.USARTn_1_inst.UCSRnB[7:0]}]} ] \
    [subst  {[format {usart_test_tb3.USARTn_1_inst.UCSRnC[7:0]}]} ]
}


set groupId0 [waveform add -groups {{Core Signals}}]
waveform format $groupId0 -namecolor #ffff00
set gpGlist0 [waveform hierarchy contents $groupId0]
set gpID0 [lindex $gpGlist0 0]
foreach {name attrs} [subst  {
    {[format {usart_test_tb3.core_ireset}]} {-namecolor #ffff00}
    {[format {usart_test_tb3.cp2}]} {-namecolor #ffff00}
    {[format {usart_test_tb3.core_dbusout[7:0]}]} {-radix %b -namecolor #ffff00}
    {[format {usart_test_tb3.core_ramwe}]} {-namecolor #ffff00}
    {[format {usart_test_tb3.core_ramre}]} {-namecolor #ffff00}
    {[format {usart_test_tb3.core_ramadr[11:0]}]} {-namecolor #ffff00}
    {[format {usart_test_tb3.core_irqackad[5:0]}]} {-namecolor #ffff00}
    {[format {usart_test_tb3.core_irqack}]} {-namecolor #ffff00}
}] childcmds {
    {}
    {}
    {}
    {}
    {}
    {}
    {}
    {}
} {
    set expected [ join [waveform signals -format path $gpID0] ]
    if {[string equal $name $expected] || $name == "cdivider"} {
        if {$attrs != ""} {
            eval waveform format $gpID0 $attrs
        }
        if { $childcmds != ""} {
            eval $childcmds
        }
    }
    set gpGlist0 [lrange $gpGlist0 1 end]
    set gpID0 [lindex $gpGlist0 0]
}


set groupId0 [waveform add -groups {{USART_0 Signals}}]
waveform format $groupId0 -namecolor #00ff00

set groupId1 [waveform find -name {Control Reg 0}]
set gpGlist1 [waveform hierarchy contents $groupId1]
set gpID1 [lindex $gpGlist1 0]
foreach {name attrs} [subst  {
    {[format {usart_test_tb3.USARTn_0_inst.UBRRn[11:0]}]} {-radix %d}
    {[format {usart_test_tb3.USARTn_0_inst.UCSRnA[7:0]}]} {-radix %b}
    {[format {usart_test_tb3.USARTn_0_inst.UCSRnB[7:0]}]} {-radix %b}
    {[format {usart_test_tb3.USARTn_0_inst.UCSRnC[7:0]}]} {-radix %b}
}] childcmds {
    {}
    {}
    {}
    {}
} {
    set expected [ join [waveform signals -format path $gpID1] ]
    if {[string equal $name $expected] || $name == "cdivider"} {
        if {$attrs != ""} {
            eval waveform format $gpID1 $attrs
        }
        if { $childcmds != ""} {
            eval $childcmds
        }
    }
    set gpGlist1 [lrange $gpGlist1 1 end]
    set gpID1 [lindex $gpGlist1 0]
}
waveform hierarchy collapse $groupId1

set gpGlist0 [waveform hierarchy contents $groupId0]
set gpID0 [lindex $gpGlist0 0]
foreach {name attrs} [subst  {
    {[format {usart_test_tb3.data_bus[0]}]} {-radix %b -namecolor #00ff00}
    {[format {usart_test_tb3.d_en_bus[0]}]} {-namecolor #00ff00}
    groupId13 {}
    {[format {usart_test_tb3.UMSEL0}]} {-namecolor #00ff00}
    {[format {usart_test_tb3.USARTn_0_inst.XCKn_i}]} {}
    {[format {usart_test_tb3.DDR_XCK0}]} {-namecolor #00ff00}
    {[format {usart_test_tb3.USARTn_0_inst.XCKn_o}]} {}
    {[format {usart_test_tb3.USARTn_0_inst.TxDn_o}]} {}
    {[format {usart_test_tb3.TXEN0}]} {-namecolor #00ff00}
    {[format {usart_test_tb3.USARTn_0_inst.RxDn_i}]} {}
    {[format {usart_test_tb3.RXEN0}]} {-namecolor #00ff00}
    {[format {usart_test_tb3.USARTn_0_inst.rc_state[1:0]}]} {-radix %d}
    {[format {usart_test_tb3.USARTn_0_inst.rx_filt}]} {}
    {[format {usart_test_tb3.USARTn_0_inst.rx_sync[2:0]}]} {-radix %b}
    {[format {usart_test_tb3.USARTn_0_inst.rx_bitcnt[3:0]}]} {-radix %d}
    {[format {usart_test_tb3.USARTn_0_inst.rx_samp}]} {}
    {[format {usart_test_tb3.USARTn_0_inst.rx_sh_reg[10:0]}]} {-radix %b}
    {[format {usart_test_tb3.USARTn_0_inst.tx_samp}]} {}
    {[format {usart_test_tb3.USARTn_0_inst.tx_ris_e}]} {}
    {[format {usart_test_tb3.USARTn_0_inst.tx_fal_e}]} {}
}] childcmds {
    {}
    {}
    {}
    {}
    {}
    {}
    {}
    {}
    {}
    {}
    {}
    {}
    {}
    {}
    {}
    {}
    {}
    {}
    {}
} {
    set expected [ join [waveform signals -format path $gpID0] ]
    if {[string equal $name $expected] || $name == "cdivider"} {
        if {$attrs != ""} {
            eval waveform format $gpID0 $attrs
        }
        if { $childcmds != ""} {
            eval $childcmds
        }
    }
    set gpGlist0 [lrange $gpGlist0 1 end]
    set gpID0 [lindex $gpGlist0 0]
}
waveform hierarchy collapse $groupId0


set groupId0 [waveform add -groups {{USART_1 Signals}}]
waveform format $groupId0 -namecolor #00ffff

set groupId1 [waveform find -name {Control Reg 1}]
set gpGlist1 [waveform hierarchy contents $groupId1]
set gpID1 [lindex $gpGlist1 0]
foreach {name attrs} [subst  {
    {[format {usart_test_tb3.USARTn_1_inst.UBRRn[11:0]}]} {-radix %d}
    {[format {usart_test_tb3.USARTn_1_inst.UCSRnA[7:0]}]} {-radix %b}
    {[format {usart_test_tb3.USARTn_1_inst.UCSRnB[7:0]}]} {-radix %b}
    {[format {usart_test_tb3.USARTn_1_inst.UCSRnC[7:0]}]} {-radix %b}
}] childcmds {
    {}
    {}
    {}
    {}
} {
    set expected [ join [waveform signals -format path $gpID1] ]
    if {[string equal $name $expected] || $name == "cdivider"} {
        if {$attrs != ""} {
            eval waveform format $gpID1 $attrs
        }
        if { $childcmds != ""} {
            eval $childcmds
        }
    }
    set gpGlist1 [lrange $gpGlist1 1 end]
    set gpID1 [lindex $gpGlist1 0]
}

set gpGlist0 [waveform hierarchy contents $groupId0]
set gpID0 [lindex $gpGlist0 0]
foreach {name attrs} [subst  {
    {[format {usart_test_tb3.data_bus[1]}]} {-radix %b -namecolor #00ffff}
    {[format {usart_test_tb3.d_en_bus[1]}]} {-namecolor #00ffff}
    groupId38 {}
    {[format {usart_test_tb3.UMSEL1}]} {-namecolor #00ffff}
    {[format {usart_test_tb3.USARTn_1_inst.XCKn_i}]} {}
    {[format {usart_test_tb3.DDR_XCK1}]} {-namecolor #00ffff}
    {[format {usart_test_tb3.USARTn_1_inst.XCKn_o}]} {-color #00ffff}
    {[format {usart_test_tb3.USARTn_1_inst.tx_ris_e}]} {-color #00ffff}
    {[format {usart_test_tb3.USARTn_1_inst.TxDn_o}]} {-color #00ffff}
    {[format {usart_test_tb3.TXEN1}]} {-namecolor #00ffff}
    {[format {usart_test_tb3.USARTn_1_inst.RxDn_i}]} {-color #00ffff}
    {[format {usart_test_tb3.USARTn_1_inst.tx_fal_e}]} {-color #00ffff}
    {[format {usart_test_tb3.USARTn_1_inst.rx_sh_reg[10:0]}]} {-radix %b -color #00ffff}
    {[format {usart_test_tb3.RXEN1}]} {-namecolor #00ffff}
    {[format {usart_test_tb3.USARTn_1_inst.rc_state[1:0]}]} {-radix %d}
    {[format {usart_test_tb3.USARTn_1_inst.rx_filt}]} {}
    {[format {usart_test_tb3.USARTn_1_inst.rx_sync[2:0]}]} {-radix %b}
    {[format {usart_test_tb3.USARTn_1_inst.rx_bitcnt[3:0]}]} {-radix %d}
    {[format {usart_test_tb3.USARTn_1_inst.rx_baud_cnt[3:0]}]} {-radix %d}
    {[format {usart_test_tb3.USARTn_1_inst.tx_samp}]} {}
    {[format {usart_test_tb3.USARTn_1_inst.rx_samp}]} {}
}] childcmds {
    {}
    {}
    {}
    {}
    {}
    {}
    {}
    {}
    {}
    {}
    {}
    {}
    {}
    {}
    {}
    {}
    {}
    {}
    {}
    {}
} {
    set expected [ join [waveform signals -format path $gpID0] ]
    if {[string equal $name $expected] || $name == "cdivider"} {
        if {$attrs != ""} {
            eval waveform format $gpID0 $attrs
        }
        if { $childcmds != ""} {
            eval $childcmds
        }
    }
    set gpGlist0 [lrange $gpGlist0 1 end]
    set gpID0 [lindex $gpGlist0 0]
}


waveform xview limits 522388060ps 909090910ps
