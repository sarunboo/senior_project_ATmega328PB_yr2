
#
# Mnemonic Maps
#
mmap new  -reuse -name {Boolean as Logic} -radix %b -contents {{%c=FALSE -edgepriority 1 -shape low}
{%c=TRUE -edgepriority 1 -shape high}}
mmap new  -reuse -name {Example Map} -radix %x -contents {{%b=11???? -bgcolor orange -label REG:%x -linecolor yellow -shape bus}
{%x=1F -bgcolor red -label ERROR -linecolor white -shape EVENT}
{%x=2C -bgcolor red -label ERROR -linecolor white -shape EVENT}
{%x=* -label %x -linecolor gray -shape bus}}

array unset createdGroup
array set createdGroup {}
#
# Groups
#
if {[catch {group get -using [list {Outputs}]}]} {
set createdGroup([list {Outputs}]) 1
catch {group new -name Outputs -overlay 0}
}
if {[catch {group get -using [list {Inputs}]}]} {
set createdGroup([list {Inputs}]) 1
catch {group new -name Inputs -overlay 0}
}
if {[catch {group get -using [list {Internals}]}]} {
set createdGroup([list {Internals}]) 1
catch {group new -name Internals -overlay 0}
}
if {[catch {group get -using [list {IRQ_out}]}]} {
set createdGroup([list {IRQ_out}]) 1
catch {group new -name IRQ_out -overlay 0}
}
if {[catch {group get -using [list {IRQ_in}]}]} {
set createdGroup([list {IRQ_in}]) 1
catch {group new -name IRQ_in -overlay 0}
}
if {[catch {group get -using [list {Control_Reg}]}]} {
set createdGroup([list {Control_Reg}]) 1
catch {group new -name Control_Reg -overlay 0}
}
if {[catch {group get -using [list {TX_internals}]}]} {
set createdGroup([list {TX_internals}]) 1
catch {group new -name TX_internals -overlay 0}
}
if {[catch {group get -using [list {RX_internals}]}]} {
set createdGroup([list {RX_internals}]) 1
catch {group new -name RX_internals -overlay 0}
}
if {[info exists createdGroup([list {Outputs}])]} {
group using Outputs
group set -overlay 0
group set -comment {}
group clear 0 end
group insert \
    [subst  {[format {usart_test_tb.uut.out_en}]} ] \
    [subst  {[format {usart_test_tb.uut.dbus_out[7:0]}]} ] \
    [subst  {[format {usart_test_tb.uut.UMSEL}]} ] \
    [subst  {[format {usart_test_tb.uut.XCKn_o}]} ] \
    [subst  {[format {usart_test_tb.uut.TxDn_o}]} ] \
    [subst  {[format {usart_test_tb.uut.RXENn}]} ] \
    [subst  {[format {usart_test_tb.uut.TXENn}]} ] \
    IRQ_out
}

if {[info exists createdGroup([list {Inputs}])]} {
group using Inputs
group set -overlay 0
group set -comment {}
group clear 0 end
group insert \
    [subst  {[format {usart_test_tb.uut.ireset}]} ] \
    [subst  {[format {usart_test_tb.uut.cp2}]} ] \
    [subst  {[format {usart_test_tb.uut.ram_Addr[11:0]}]} ] \
    [subst  {[format {usart_test_tb.uut.ramre}]} ] \
    [subst  {[format {usart_test_tb.uut.ramwe}]} ] \
    [subst  {[format {usart_test_tb.uut.dbus_in[7:0]}]} ] \
    [subst  {[format {usart_test_tb.uut.DDR_XCKn}]} ] \
    [subst  {[format {usart_test_tb.uut.XCKn_i}]} ] \
    [subst  {[format {usart_test_tb.uut.RxDn_i}]} ] \
    IRQ_in
}

if {[info exists createdGroup([list {Internals}])]} {
group using Internals
group set -overlay 0
group set -comment {}
group clear 0 end
group insert \
    Control_Reg \
    TX_internals \
    RX_internals
}

if {[info exists createdGroup([list {IRQ_out}])]} {
group using IRQ_out
group set -overlay 0
group set -comment {}
group clear 0 end
group insert \
    [subst  {[format {usart_test_tb.uut.TxcIRQ}]} ] \
    [subst  {[format {usart_test_tb.uut.RxcIRQ}]} ] \
    [subst  {[format {usart_test_tb.uut.UdreIRQ}]} ] \
    [subst  {[format {usart_test_tb.uut.UStBIRQ}]} ]
}

if {[info exists createdGroup([list {IRQ_in}])]} {
group using IRQ_in
group set -overlay 0
group set -comment {}
group clear 0 end
group insert \
    [subst  {[format {usart_test_tb.uut.irqack_addr[5:0]}]} ] \
    [subst  {[format {usart_test_tb.uut.irqack}]} ]
}

if {[info exists createdGroup([list {Control_Reg}])]} {
group using Control_Reg
group set -overlay 0
group set -comment {}
group clear 0 end
group insert \
    [subst  {[format {usart_test_tb.uut.UCSZn[2:0]}]} ] \
    [subst  {[format {usart_test_tb.uut.UCSRnA[7:0]}]} ] \
    [subst  {[format {usart_test_tb.uut.UCSRnB[7:0]}]} ] \
    [subst  {[format {usart_test_tb.uut.UCSRnC[7:0]}]} ] \
    [subst  {[format {usart_test_tb.uut.UBRRn[11:0]}]} ] \
    [subst  {[format {usart_test_tb.uut.UDRn[7:0]}]} ] \
    [subst  {[format {usart_test_tb.uut.Temp[3:0]}]} ]
}

if {[info exists createdGroup([list {TX_internals}])]} {
group using TX_internals
group set -overlay 0
group set -comment {}
group clear 0 end
group insert \
    [subst  {[format {usart_test_tb.uut.tx_reg_mux[9:0]}]} ] \
    [subst  {[format {usart_test_tb.uut.tx_fifo_out[9:0]}]} ] \
    [subst  {[format {usart_test_tb.uut.tx_sh_reg[10:0]}]} ] \
    [subst  {[format {usart_test_tb.uut.FIFO_tx_inst.fifo_buf[9:0]}]} ] \
    [subst  {[format {usart_test_tb.uut.tx_fifo_re}]} ] \
    [subst  {[format {usart_test_tb.uut.tx_fifo_wr}]} ] \
    [subst  {[format {usart_test_tb.uut.tr_done}]} ] \
    [subst  {[format {usart_test_tb.uut.tr_state}]} ] \
    [subst  {[format {usart_test_tb.uut.tx_fifo_empty}]} ] \
    [subst  {[format {usart_test_tb.uut.tx_fifo_full}]} ] \
    [subst  {[format {usart_test_tb.uut.tx_en_clk}]} ] \
    [subst  {[format {usart_test_tb.uut.tx_samp}]} ]
}

if {[info exists createdGroup([list {RX_internals}])]} {
group using RX_internals
group set -overlay 0
group set -comment {}
group clear 0 end
group insert \
    [subst  {[format {usart_test_tb.uut.rx_sh_reg_mux[10:0]}]} ] \
    [subst  {[format {usart_test_tb.uut.rx_fifo_out[10:0]}]} ] \
    [subst  {[format {usart_test_tb.uut.rx_sh_reg[10:0]}]} ] \
    [subst  {[format {usart_test_tb.uut.FIFO_rx_inst.fifo_mem[0:1]}]} ] \
    [subst  {[format {usart_test_tb.uut.rx_fifo_re}]} ] \
    [subst  {[format {usart_test_tb.uut.rx_fifo_wr}]} ] \
    [subst  {[format {usart_test_tb.uut.rc_done}]} ] \
    [subst  {[format {usart_test_tb.uut.rc_state[1:0]}]} ] \
    [subst  {[format {usart_test_tb.uut.rx_fifo_empty}]} ] \
    [subst  {[format {usart_test_tb.uut.rx_fifo_full}]} ] \
    [subst  {[format {usart_test_tb.uut.rx_samp}]} ]
}

set id [waveform add -signals [subst  {
	{[format {usart_test_tb.uut.ireset}]}
	} ]]
set id [waveform add -signals [subst  {
	{[format {usart_test_tb.uut.cp2}]}
	} ]]
set id [waveform add -signals [subst  {
	{[format {usart_test_tb.uut.ram_Addr[11:0]}]}
	} ]]
set id [waveform add -signals [subst  {
	{[format {usart_test_tb.uut.ramre}]}
	} ]]
set id [waveform add -signals [subst  {
	{[format {usart_test_tb.uut.ramwe}]}
	} ]]
set id [waveform add -signals [subst  {
	{[format {usart_test_tb.uut.dbus_in[7:0]}]}
	} ]]
set id [waveform add -signals [subst  {
	{[format {usart_test_tb.uut.RxDn_i}]}
	} ]]
set id [waveform add -signals [subst  {
	{[format {usart_test_tb.uut.out_en}]}
	} ]]
set id [waveform add -signals [subst  {
	{[format {usart_test_tb.uut.dbus_out[7:0]}]}
	} ]]
set id [waveform add -signals [subst  {
	{[format {usart_test_tb.uut.UMSEL}]}
	} ]]
set id [waveform add -signals [subst  {
	{[format {usart_test_tb.uut.XCKn_o}]}
	} ]]
set id [waveform add -signals [subst  {
	{[format {usart_test_tb.uut.TxDn_o}]}
	} ]]
set id [waveform add -signals [subst  {
	{[format {usart_test_tb.uut.RXENn}]}
	} ]]
set id [waveform add -signals [subst  {
	{[format {usart_test_tb.uut.TXENn}]}
	} ]]
set id [waveform add -signals [subst  {
	{[format {usart_test_tb.uut.UCSRnA[7:0]}]}
	} ]]
set id [waveform add -signals [subst  {
	{[format {usart_test_tb.uut.UCSRnB[7:0]}]}
	} ]]
set id [waveform add -signals [subst  {
	{[format {usart_test_tb.uut.UCSRnC[7:0]}]}
	} ]]
set id [waveform add -signals [subst  {
	{[format {usart_test_tb.uut.rx_fifo_out[10:0]}]}
	} ]]
set id [waveform add -signals [subst  {
	{[format {usart_test_tb.uut.rx_sh_reg[10:0]}]}
	} ]]
set id [waveform add -signals [subst  {
	{[format {usart_test_tb.uut.FIFO_rx_inst.fifo_mem[0]}]}
	} ]]
set id [waveform add -signals [subst  {
	{[format {usart_test_tb.uut.FIFO_rx_inst.fifo_mem[1]}]}
	} ]]
set id [waveform add -signals [subst  {
	{[format {usart_test_tb.uut.rx_fifo_re}]}
	} ]]
set id [waveform add -signals [subst  {
	{[format {usart_test_tb.uut.rx_fifo_wr}]}
	} ]]
set id [waveform add -signals [subst  {
	{[format {usart_test_tb.uut.rc_done}]}
	} ]]
set id [waveform add -signals [subst  {
	{[format {usart_test_tb.uut.rc_state[1:0]}]}
	} ]]
set id [waveform add -signals [subst  {
	{[format {usart_test_tb.uut.rx_fifo_empty}]}
	} ]]
set id [waveform add -signals [subst  {
	{[format {usart_test_tb.uut.rx_fifo_full}]}
	} ]]
set id [waveform add -signals [subst  {
	{[format {usart_test_tb.uut.rx_samp}]}
	} ]]

waveform xview limits 0 10000000000ps
